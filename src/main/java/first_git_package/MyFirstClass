*****GIT DAY1*****
1. Create a project
2. Create a GITHUB REPOSITORY
    *go to github
    *Repositories>Create New Repository> first_git_project
3. Create a FIRST COMMIT for the First time
ONLY ONCE    *git init
EVERY TIME    *git add .
EVERY TIME    *git commit -m "first commit"
ONLY ONCE    *git branch -M main
ONLY ONCE    *git remote add origin https://github.com/abayramus/first_git_project.git
ONLY ONCE    *git push -u origin main
    *****Then your code should be pushed to github. REFRESH YOUR PAGE TO SEE THE CODE
NOTE: git status    ->   This is our friend. This can be used anytime to see the progress
4. Create a new SECOND COMMIT
    *Create a new java class under first_git_package: MySecondClass
    *Create a new commit and push the code to github
        * git add .
        * git commit -m "added my second java class"
        * git push
5. ADDING SPECIFIC FILES
    *Create 2 JAVA classes : MyThirdClass, MyFourthClass
    *Create a commit with ONLY myFourthClass
        *git add "src/first_git_package/MyFourthClass.java"
        *git commit -m "adding fourth class"
        *git push
6. GIT PULL
    *git pull is used to get the code from github
    *git pull = git fetch + git merge
        NOTE: if git pull trows error then use:
        git fetch
        git merge
    * NOW THAT WE HAVE OUR LOCAL UPDATED, THEN COMMIT THE CODES AND PUSH ALL TOGETHER
        *git add .
        *git commit -m "committing my codes"
        *git push
NOTE: PULL BEFORE PUSH
        *git pull -> git add . -> git commit -m "message" -> git push

*if you have any error, just google it.

*git branch OR git branch -a -> Shows all branches. Default branch is the master branch
* git branch feature
* git checkout feature
* git branch -d feature
* git checkout master
* git merge feature master branch
*git merge master feature branch
-> creates new branch named feature. This is the copy based on current branch. -> switch to feature branch
-> delete feature branch
 -> switch to master branch
-> If you run this when you are on master branch, then feature branch codes merges into
-> If you run this when you are on feature branch, then master branch codes merges into
git push --set-upstream origin feature -> use when you push for the FIRST TIME. After the first time, git push is enough


****Git DAY1***
1.create a
2. Create a Github Repository
3. go to github.com
   *repositories>Create new Repository > first_git_project
   *create a new Commit fot the first time
  only once-> * git init ( then click enter) only at the begining
  every time-> * git add .
   NOTE:*git status ->this is our friend .this can be used anytime to see the progress.to see where you are. if it is green ,it is okey
  every time-> *git commit -m "first commit"
   *git status
   ONCE *git branch -M main
  ONCE *git remote add origin https://github.com/Ilhan46/first_git_project.git
  ONCE *git push -u origin main
   *then your code should be pushed to github. refresh the page

   2.commit : create a new commit SECOND COMMIT
   *create a new java class : MySecondClass
   *Create a new commit and push the code to github
      *git add .
      *git commit -m "message"
      *git push

   == Adding specific Files
   *create a java class :MyThirdClass , MyForthClass
   *Create a new commit ONLY my forth class
   *git add "class path"
   *git commit -m "Adding 4th class"
   *git push

== git pull
   * git pull is used to get the code from github
   *git pull= git fetch + git merge
   note : if git pull throws error try first
   *git fetch
   *then git merge
   *then : git pull

now : that we have our local updated, then commit the codes and push all together
 again git add. , git commit -m "" , git push

 git pull before you git push it